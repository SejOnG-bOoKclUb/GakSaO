# 6 객체 지도

지도 은유의 핵심은 기능이 아니라 구조를 기반으로 모델을 구축하는 편이 좀 더 볌용적이고 이해하기 쉬우며 변경에 안정적이라는 것이다.

자주 변경되는 기능이 아니라 안정적인 구조를 따라 역할, 책임, 협력을 구성하라


## 기능 설계 대 구조설계

기능 측면의 설계는 제품이 사용자를 위해 무엇을 할 수 있는지에 초점을 맞춘다.
구조 측면의 설계는 제품의 형태가 어떠해야 하는지에 초점을 맞춘다.
설계의 가장 큰 도전은 기능과 구조의 조화를 이루도록 하는 것.

성공적인 소프트웨어들은 훌륭한 기능을 제공하면서도 사용자가 원하는 기능을 빠르고 안정적으로 추가할 수 있어야한다.

미래의 변경을 대비하는 것이 최선이고, 대비하는 최선의 방법은 변경을 수용할 수 있는 설계를 마련해놓는 것이다.

기능 분해 방법은 각 기능이 서로 밀접하여 덩어리를 이뤄 기능의 변경에 취약하지만,

객체지향 접근방법은 안정적인 객체 구조를 바탕으로 시스템 기능을 객체 간의 책임으로 분배한다.


구조는 사용자나 이해관계자들이 도메인에 관해 생각하는 개념과 개념들 간의 관계로 표현한다.

기능은 사용자의 목표를 만족시키기 위해 책임을 수행하는 시스템의 행위로 표현한다.


## 도메인모델
객체지향을 이용하면 사용자 모델, 디자인 모델, 시스템 이미지 모두 유사한 모습을 유지하도록 만드는 것이 가능하다.

도메인 모델의 핵심은 사용자가 도메인을 바라보는 관점을 반영해 소프트웨어를 설계하고 구현하는 것이다.
사용자 모델을 기반으로 설계와 코드를 만들면 변경에 쉽게 대처 할 수 있을 가능성이 높아진다.


## 유스케이스
사용자의 목표를 달성하기 위해 사용자와 시스템 간에 이뤄지는 상호작용의 흐름을 텍스트로 정리한 것

유스케이스는 사용자가 시스템을 통해 무엇을 얻을 수 있고 어떻게 상호작용할 수 있느냐에 관한 정보만 기술한다.


객체지향의 가장 큰 장점은 도메인을 모델링하기 위한 기법과 도메인을 프로그래밍 하기 위해 사용하는 기법이 동일하다는 점이다.
연결완전성 - 도메인 모델링에서 사용한 객체와 개념을 프로그래밍 설계에서의 객체와 클래스로 매끄럽게 변환할 수 있다.
가역성 - 연결완전성의 반대개념으로 코드의 변경을 통해서 도메인 모델의 변경사항을 유추할 수 있음을 의미.

# 07 함께모으기

개념 관점 - 사용자가 도메인을 바라보는 관점을 반영한다.
명세 관점 - 인터페이스 설계 || 객체들의 책임에 초점을 맞춘다.(프로그래머는 객체가 협력을 위해 '무엇'을 할 수 있는가에 초점을 맞춘다)
구현 관점 - 객체들의 책임을 수행하는데 필요한 동작 코드를 작성하는 것

커피주문이라는 도메인을 가지고 3가지 관점에서 접근하여 커피 주문에 대한 객체지향 설계를 진행했다.

객체지향 세계에세너는 모든 객체가 능동적이고 자율적인 존재이다.
메시지를 찾고, 메시지를 처리할 수 있는 객체를 찾고
스스로 처리할 수 없는 메시지를 다시 찾기를 반복한다.

구현하지 않고 머릿속으로만 구상한 설계는 코드로 구현하는 단계에서 대부분 변경된다.
코드를 통한 피드백없이는 깔끔한 설계를 얻을 수 없다.
설계를 간단히 끝내고 최대한 빨리 구현에 돌입하라.
